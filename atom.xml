<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Olier</title>
  
  
  <link href="http://olierjs.github.io/atom.xml" rel="self"/>
  
  <link href="http://olierjs.github.io/"/>
  <updated>2022-02-20T14:24:06.914Z</updated>
  <id>http://olierjs.github.io/</id>
  
  <author>
    <name>TbhT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mobx 的一些历史</title>
    <link href="http://olierjs.github.io/2022/02/20/mobx-history/"/>
    <id>http://olierjs.github.io/2022/02/20/mobx-history/</id>
    <published>2022-02-20T01:02:03.261Z</published>
    <updated>2022-02-20T14:24:06.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><blockquote><p>2015</p></blockquote><blockquote><ul><li><a href="https://www.mendix.com/blog/making-react-reactive-pursuit-high-performing-easily-maintainable-react-apps/">https://www.mendix.com/blog/making-react-reactive-pursuit-high-performing-easily-maintainable-react-apps/</a></li></ul></blockquote><p>mobx作者 <code>Michel Weststrate</code> 想使用react来迁移一个项目，项目的场景是：在浏览器中会绘制数千个对象，并且这些对象之间耦合度还挺高的。其中一个对象的值会被很多其他对象使用到，所以一个小的值更新，都会触发很多与UI对象无关的更新。这些值可能在用户的拖拽交互中更新，所以为了保持UI的持续响应，所有的更新和重绘都需要在小于 40ms 的时间内进行。单纯从react来说，它还是很快的，但是很快作者就发现，单纯靠react是没法完成这个工作的。</p><p>除了要保持这个项目所需要的性能，代码的可维护性也是需要符合react的原则。因此需要找一种优雅的解决方案，然后就从函数响应式编程中引入了一个概念：<code>Observables</code>。observables 的卖点就是其他的所有使用到的observable都是自动计算出来的。当<code>observable</code>所依赖的其他的<code>observables</code>发生了变化后，会被重新计算。在 <code>Ember</code> 和 <code>Knockout</code>的中，也有使用到<code>observable</code>这个概念。</p><p>也就是说，我们的<code>model</code>模型变成了<code>Observable</code>，那么react 组件就变成了 <code>model</code>模型的<code>Observers</code>。</p><h2 id="从例子开始"><a href="#从例子开始" class="headerlink" title="从例子开始"></a>从例子开始</h2><p>现在假设有这么一个场景，有一系列的文章，文章有名字和价格；有购物车，购物车中有每个文章的数量，以及文章继承下来的价格。最终用来算出总价格。这两者之间的关系如下图：</p><p><img src="./images/mobservable-model.png"></p><p>根据上面这个图，可以列一个需求列表：</p><ul><li><p>如果文章的价格变化了，那么购物车中相关的item价格都应该更新</p></li><li><p>购物车的item数量更新了，那么总价也需要更新</p></li><li><p>文章的名称更新了，那么相关视图也需要更新</p></li><li><p>etc…</p></li></ul><h3 id="data模型"><a href="#data模型" class="headerlink" title="data模型"></a>data模型</h3><p>  根据上面的需求list，可以写出一个数据模型，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Article</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">    mobx.extendObservable(<span class="built_in">this</span>, &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">price</span>: price</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShoppingCartEntry</span>(<span class="params">article</span>) </span>&#123;</span><br><span class="line">    mobx.extendObservable(<span class="built_in">this</span>, &#123;</span><br><span class="line">        <span class="attr">article</span>: article,</span><br><span class="line">        <span class="attr">amount</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.article ? <span class="built_in">this</span>.article.price * <span class="built_in">this</span>.amount : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ShoppingCart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    mobx.extendObservable(<span class="built_in">this</span>, &#123;</span><br><span class="line">        <span class="attr">entries</span>: [],</span><br><span class="line">        <span class="attr">total</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.entries.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum, entry</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> sum + entry.price;</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UI模型"><a href="#UI模型" class="headerlink" title="UI模型"></a>UI模型</h3><p>  根据上面的数据模型，来构建一个UI，然后使用observer来进行包装就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> CartView = mobxReact.observer(React.createClass(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">renderEntry</span>(<span class="params">entry</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">CartEntryView</span> <span class="attr">entry</span>=<span class="string">&#123;entry&#125;</span> <span class="attr">cart</span>=<span class="string">&#123;this.props.cart&#125;</span> <span class="attr">key</span>=<span class="string">&#123;entry.id&#125;</span> /&gt;</span></span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;cart&quot;</span>&gt;</span>&#123;this.props.cart.entries.map(renderEntry)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Total: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;total&quot;</span>&gt;</span>&#123;this.props.cart.total&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> CartEntryView = mobxReact.observer(React.createClass(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.removeArticle&#125;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.props.entry.article.name&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.props.entry.amount&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">removeArticle</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (--<span class="built_in">this</span>.props.entry.amount &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">this</span>.props.cart.entries.splice(<span class="built_in">this</span>.props.cart.entries.indexOf(<span class="built_in">this</span>.props.entry), <span class="number">1</span>);      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>mobx的observer函数做了两件事，一是将fc组件转换成一个observer 函数；二是将fc组件自己注册到observer 函数上。这样的话就能在每次state过期后，能够force render。</p><h3 id="性能更高的原因"><a href="#性能更高的原因" class="headerlink" title="性能更高的原因"></a>性能更高的原因</h3><p>react原始的更新方式，就是re-render整个组件树。但是着有一个问题，当一个组件树是一个广度优先树（即，业务逻辑是在几颗同级树之间更新时，就需要从父级树force更新，虽然没有更新的树，没有进行更新，但是整个树进行了重新reconcile（即，进行了diff操作）</p><p>经过mobx优化的react的更新方式，则是通过包装某个组件，将force-render的工作交给了<code>observer</code> 函数，这个函数在进行更新时，就不要将同级树进行更新（即，可以按需进行更新）。</p><p>那么可以通过使用其他技术，来实现mobx的这种更新吗？maybe，比如<code>immutablejs</code>，可以使得react 组件实现按需更新，但是需要开发者做好数据模型的设计。</p><p>还有另外一种技术，就是使用 <code>event-bus</code> 来对可能需要更新的数据进行事件的注册，注销，在组件的合适时机。但是这样会产生很多样板代码，也不是一个好的方案。</p><hr><h1 id="Pure-UI"><a href="#Pure-UI" class="headerlink" title="Pure UI"></a>Pure UI</h1><blockquote><ul><li>UI = view(application_state)</li><li><a href="https://rauchg.com/2015/pure-ui">https://rauchg.com/2015/pure-ui</a></li><li><a href="https://medium.com/@mweststrate/pure-rendering-in-the-light-of-time-and-state-4b537d8d40b1">https://medium.com/@mweststrate/pure-rendering-in-the-light-of-time-and-state-4b537d8d40b1</a></li></ul></blockquote><h1 id="mobx-作者专访"><a href="#mobx-作者专访" class="headerlink" title="mobx 作者专访"></a>mobx 作者专访</h1><blockquote><ul><li><a href="https://survivejs.com/blog/mobx-interview/">https://survivejs.com/blog/mobx-interview/</a></li></ul></blockquote><h1 id="mobx-observe-原理"><a href="#mobx-observe-原理" class="headerlink" title="mobx.observe 原理"></a>mobx.observe 原理</h1><blockquote><ul><li><a href="https://medium.com/@mweststrate/object-observe-is-dead-long-live-mobservable-observe-ad96930140c5">https://medium.com/@mweststrate/object-observe-is-dead-long-live-mobservable-observe-ad96930140c5</a></li></ul></blockquote><h1 id="mobx-响应式原理介绍"><a href="#mobx-响应式原理介绍" class="headerlink" title="mobx 响应式原理介绍"></a>mobx 响应式原理介绍</h1><blockquote><ul><li>2015</li><li><a href="https://medium.com/hackernoon/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254">https://medium.com/hackernoon/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254</a></li></ul></blockquote><h1 id="mobx2-2-更新"><a href="#mobx2-2-更新" class="headerlink" title="mobx2.2 更新"></a>mobx2.2 更新</h1><blockquote><ul><li>2016</li><li><a href="https://medium.com/@mweststrate/mobx-2-2-explicit-actions-controlled-mutations-and-improved-dx-45cdc73c7c8d">https://medium.com/@mweststrate/mobx-2-2-explicit-actions-controlled-mutations-and-improved-dx-45cdc73c7c8d</a></li></ul></blockquote><h1 id="解耦state和UI"><a href="#解耦state和UI" class="headerlink" title="解耦state和UI"></a>解耦state和UI</h1><blockquote><ul><li><a href="https://medium.com/hackernoon/how-to-decouple-state-and-ui-a-k-a-you-dont-need-componentwillmount-cc90b787aa37">https://medium.com/hackernoon/how-to-decouple-state-and-ui-a-k-a-you-dont-need-componentwillmount-cc90b787aa37</a></li><li>分治的复杂性： <a href="https://www.youtube.com/watch?v=3J9EJrvqOiM&amp;list=PLW0vzLDjfaNSFs7OBLK6anfQiE5FJzAPD&amp;index=8">https://www.youtube.com/watch?v=3J9EJrvqOiM&amp;list=PLW0vzLDjfaNSFs7OBLK6anfQiE5FJzAPD&amp;index=8</a></li></ul></blockquote><h1 id="mobx3-0"><a href="#mobx3-0" class="headerlink" title="mobx3.0"></a>mobx3.0</h1><blockquote><ul><li><a href="https://medium.com/@mweststrate/mobx-3-released-unpeeling-the-onion-ca877382f443">https://medium.com/@mweststrate/mobx-3-released-unpeeling-the-onion-ca877382f443</a></li></ul></blockquote><h1 id="mobx-背后的基本原则"><a href="#mobx-背后的基本原则" class="headerlink" title="mobx 背后的基本原则"></a>mobx 背后的基本原则</h1><blockquote><ul><li>2017</li><li><a href="https://hackernoon.com/the-fundamental-principles-behind-mobx-7a725f71f3e8">https://hackernoon.com/the-fundamental-principles-behind-mobx-7a725f71f3e8</a></li></ul></blockquote><h1 id="immutable-的实现-immerjs"><a href="#immutable-的实现-immerjs" class="headerlink" title="immutable 的实现 immerjs"></a>immutable 的实现 immerjs</h1><blockquote><ul><li><a href="https://medium.com/hackernoon/introducing-immer-immutability-the-easy-way-9d73d8f71cb3">https://medium.com/hackernoon/introducing-immer-immutability-the-easy-way-9d73d8f71cb3</a></li></ul></blockquote><h1 id="mobx4-发布"><a href="#mobx4-发布" class="headerlink" title="mobx4 发布"></a>mobx4 发布</h1><blockquote><ul><li>2018 </li><li><a href="https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da">https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da</a></li></ul></blockquote><h1 id="mobx5-发布"><a href="#mobx5-发布" class="headerlink" title="mobx5 发布"></a>mobx5 发布</h1><blockquote><ul><li>2018</li><li><a href="https://medium.com/@mweststrate/mobx-5-the-saga-continues-4852bce05572">https://medium.com/@mweststrate/mobx-5-the-saga-continues-4852bce05572</a></li></ul></blockquote><h1 id="对UI的事后想法"><a href="#对UI的事后想法" class="headerlink" title="对UI的事后想法"></a>对UI的事后想法</h1><blockquote><ul><li>2019</li><li><a href="https://medium.com/@mweststrate/ui-as-an-afterthought-26e5d2bb24d6">https://medium.com/@mweststrate/ui-as-an-afterthought-26e5d2bb24d6</a></li></ul></blockquote><h1 id="mobx6"><a href="#mobx6" class="headerlink" title="mobx6"></a>mobx6</h1><blockquote><ul><li><a href="https://michel.codes/blogs/mobx6/">https://michel.codes/blogs/mobx6/</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">mobx 的一些</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Passed 2021</title>
    <link href="http://olierjs.github.io/2022/01/13/2021/"/>
    <id>http://olierjs.github.io/2022/01/13/2021/</id>
    <published>2022-01-13T07:54:54.000Z</published>
    <updated>2022-02-20T14:24:06.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Passed-what"><a href="#Passed-what" class="headerlink" title="Passed what"></a>Passed what</h1><p>过去的2021年，技术上的成长更加深，这一年探索了少儿编程祖 <strong>scratch</strong> 的整个技术架构，深度学习了 <strong>blockly</strong> 的渲染，记了一系列的笔记；深入<br>了解了 <strong>makecode</strong> 是怎么做少儿编程方向的，将他们的几个模块熟读了下，也断断续续地在写 <strong>ast</strong> 的编译，感觉后面基本上和前端关系不大了。一度 也在怀疑，如果真得做深入了，干嘛还待在这，应该去专业做这个东西的部门。</p><p>当然，这两年一直在教育部门。从业务侧，中台侧的探索，在最后的想转岗时，又转向了探索少儿编程。尽管一直深感这业务做不起来，毕竟 <strong>scratch</strong>在国外 都没盈利，国内的编程猫之类的，其实做的也没有想象中出色，多数是功能堆叠的复杂。不过在技术深度上，确实深入了很多，尤其是少儿编程这个方向，让我自己在这个方向上，视野开阔了很多，还写了 <strong>asdl_parser</strong>，虽然也仅是学习大佬的牙慧。</p><hr><p>双减后又去了 <em>Data-TNS</em> 部门，其实一开始和负责人聊完以后，觉得不是自己想做的方向，后来得知这边在做一些 <strong>BFF</strong> 的事情，感觉也可以先看看。说起来<br>上次写年终总结还是在19年还是18年那会。在教育部门其实待得开心和不开心五五开吧，最开始的一年，开心 &amp; 累；后面的一年，感觉疲惫 &amp; 累。感觉双减或许对于<br>业务来说并不好，但是对我个人而言，反而是一种解脱。转去少儿编程的时候，其实是想着离职，再看看少儿编程有什么有意思的事情，然后跳槽。</p><p><strong>Time fly</strong> ！ </p><p>时间过得可真是太快了，转眼间人生精力和智力最巅峰的两年就过去了，在一个热门赛道干到这个赛道黄掉。后来真切地意识到，<br>赛道热门和一线员工没什么关系，赛道干好了，一线也不会升职加薪，反而是管理层面的。团队越来越大，然后管理的职级也就越来越高，<br>但本身和我没多大关系。</p><p>2021 年我究竟在做什么？仔细想想好像没有2020年那么努力工作了，主要是环境不好了，想想入职字节的前三个月每天都很开心。后来疫情来了，也是在<br>努力工作，但是后来去中台后，就很不开心 &amp; 累。朴素的人往往能说出朴素却深刻的话，<strong>往前看</strong>。毕业时给自己定下一个朴素的要求：<em><strong>每年都比上一年成长0.1</strong></em>，现在再回头看，感觉还真是冥冥之中的巧合，尽管成长并不是如我所意料之中的。对自己的性格了解更深刻，也对难以改动的点，进行<br>转变。</p><hr><h1 id="Now-what"><a href="#Now-what" class="headerlink" title="Now what"></a>Now what</h1><p>在 <strong>技术</strong> 方向的成长，已经比我预想中的快了两年，2021年更多的是 <em>硬技能</em> 之外的成长。2022 年暂时还没想好整体的规划，不过感觉整体上会更宏观，抓大放小。一个业务真得能成长，一定是在大方向上踩对点，在小细节上做再多，投入再多，意义不大。跳开技术视角，去思考业务，个人，公司之间的关系。</p><p>希望2022年更加平和，更加宏观地去看待问题。</p><hr><p>希望 2022 年能遇到更多 有意思的事情 和 人。</p>]]></content>
    
    
    <summary type="html">2021年 工作总结</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>UI For React 模式</title>
    <link href="http://olierjs.github.io/2021/12/23/ui-patterns/"/>
    <id>http://olierjs.github.io/2021/12/23/ui-patterns/</id>
    <published>2021-12-23T07:54:54.000Z</published>
    <updated>2022-02-20T14:24:06.914Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文中的设计模式主要是针对React + hooks的设计模式。更多信息可以参考<a href="https://www.patterns.dev/posts/singleton-pattern/">patterns.dev</a>。</p></blockquote><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>  在 <a href="https://book.douban.com/subject/34262305/">设计模式：可复用面向对象软件的基础</a> 本书中提到的23种设计模式是OOP场景下的，虽然JS的面向对象做的并不是十分好，不过也有一些类似的场景可以复用这些模式。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>在应用之间共享应用的全局状态</p></blockquote><p>  单例模式本身要求类的实例在某个范围或者全局是唯一的，最简单的方式其实就是通过一个模块导出一个唯一的实例，如果还需要有其他后置参数需要加入到整个实例中进行某些操作，那么则可以通过导出一些修改实例属性的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// some-module.js</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  #param1 = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">change</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.#param1 = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Singleton()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changeParam1</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  instance.change(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  单例模式某种程度上相当于一个，大号的全局变量，全局变量的优缺点它也会有。我想这也是在一些场景下，它被称作<code>反模式</code>的原因。单例模式在某些场景下会适用，可以减少内容和网络的适用。上面的例子有点过于炫技，其实也可以使用 对象字面量 配合 <code>Object.freeze</code>来做单例模式。</p><p>  当然缺点是在测试的时候，可能需要在某个<code>describe</code> 完成后，重置当前的状态，并且多个测试之间最好不要并行测试。</p><p>  在 <code>React</code>中，使用<code>redux/context</code>这样的工具，从效果上也是和单例模式类似，可以从组件内全局接触。这种模式好的一点就是可以指定修改状态的方式，组件没法直接修改全局状态。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote><p>劫持和控制对原对象的操作</p></blockquote><p>  代理模式在js中非常常用，在 <code>ES5</code> 时期，<code>Vue2</code> 就借助 <code>Object.__defineGetter__, Object.__defineSetter__</code> 来劫持对象属性，来创建响应式的数据。在 <code>ES6</code> 中，加入了<code>Proxy</code> 来满足劫持的需求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The value of <span class="subst">$&#123;prop&#125;</span> is <span class="subst">$&#123;obj[prop]&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">obj, prop, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Changed <span class="subst">$&#123;prop&#125;</span> from <span class="subst">$&#123;obj[prop]&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    obj[prop] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// try to use proxy</span></span><br><span class="line"></span><br><span class="line">personProxy.name;</span><br><span class="line">personProxy.age = <span class="number">2</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  代理模式在需要劫持数据的场景下是非常有用的，比如在做数据校验，以及在<code>typescript</code>中使用的装饰器，都是通过劫持属性对象来实现的。与<code>Proxy</code>搭配使用的另一个内建对象 <code>Reflect</code>。</p><p>  即，不直接通过 <code>obj[prop]</code>来访问，相反，通过<code>Reflect.get()/set()</code>来访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">obj, prop</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The value of <span class="subst">$&#123;prop&#125;</span> is <span class="subst">$&#123;<span class="built_in">Reflect</span>.get(obj, prop)&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">obj, prop, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Changed <span class="subst">$&#123;prop&#125;</span> from <span class="subst">$&#123;obj[prop]&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">Reflect</span>.set(obj, prop, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>  当然如果在proxy中过于重的逻辑处理，可能会对性能有影响。在 <code>Vue/React</code> 生态中，代理模式的使用，更多的还是在<br>库的层面使用。比如<code>mobx6</code>以后，也采用了<code>Proxy</code>来做相应式数据的更新。</p><h2 id="Provider-模式"><a href="#Provider-模式" class="headerlink" title="Provider 模式"></a>Provider 模式</h2><blockquote><p>将数据对多个子组件可见</p></blockquote><p>  在前端领域中，常常会有父组件的一部门数据需要给多个子组件可见。<code>React</code>中提供了<code>Context</code>这样的机制来实现 <code>Provider</code>模式。比如常见的换皮肤<br>的工作，就是可以通过 <code>Context</code> 来很方便的实现。</p><p>  典型的一个例子就是 <code>style-component</code>，</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; ThemeProvider &#125; <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = useState(<span class="string">&quot;dark&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toggleTheme</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTheme(theme === <span class="string">&quot;light&quot;</span> ? <span class="string">&quot;dark&quot;</span> : <span class="string">&quot;light&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">App</span> <span class="attr">theme-</span>$&#123;<span class="attr">theme</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ThemeProvider</span> <span class="attr">theme</span>=<span class="string">&#123;themes[theme]&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Toggle</span> <span class="attr">toggleTheme</span>=<span class="string">&#123;toggleTheme&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">List</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// li.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">ListItem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod</span></span><br><span class="line"><span class="xml">      tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim</span></span><br><span class="line"><span class="xml">      veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea</span></span><br><span class="line"><span class="xml">      commodo consequat.</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Li = styled.li<span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;(&#123; theme &#125;) =&gt; <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">     background-color: <span class="subst">$&#123;theme.backgroundColor&#125;</span>;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">     color: <span class="subst">$&#123;theme.color&#125;</span>;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  `</span>&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  provider 模式的优点有亮点：</p><ul><li><p>不用很繁琐的传入属性，减少重构代码出问题的几率</p></li><li><p>避免通过props传属性带来的 <code>反模式</code></p></li></ul><p>  当然缺点也很明显：</p><ul><li>过多的使用<code>context</code>，会使得只要一个 <code>context</code>进行了更新，那么整个组件就会进行 <code>re-render</code>，从而造成性能问题</li></ul><h2 id="prototype-模式"><a href="#prototype-模式" class="headerlink" title="prototype 模式"></a>prototype 模式</h2><blockquote><p>在相同类型的对象中，共享同一个属性或者方法</p></blockquote><p>  这种模式来说，js本身的继承机制就可以看作是最好的诠释。关于这块的文章已经非常多了，不在此赘述。</p><h2 id="Container-Presentational-模式"><a href="#Container-Presentational-模式" class="headerlink" title="Container/Presentational 模式"></a>Container/Presentational 模式</h2><blockquote><p>通过将视图层从应用逻辑中分离出来，从而将关注点分离</p></blockquote><p>  在 <code>React</code> 场景下，尤其是有了 <code>FC</code> 和 <code>hooks</code> 以后，要想将关注点分离，就是使用 <code>C/P</code> 模式。具体的表现则是</p><h4 id="container-component"><a href="#container-component" class="headerlink" title="container component"></a>container component</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// class component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogImagesContainer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">dogs</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    fetch(<span class="string">&quot;https://dog.ceo/api/breed/labrador/images/random/6&quot;</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function">(<span class="params">&#123; message &#125;</span>) =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">dogs</span>: message &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">DogImages</span> <span class="attr">dogs</span>=<span class="string">&#123;this.state.dogs&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// fc </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDogImages</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [dogs, setDogs] = useState([]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">&quot;https://dog.ceo/api/breed/labrador/images/random/6&quot;</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function">(<span class="params">&#123; message &#125;</span>) =&gt;</span> setDogs(message));</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dogs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="presentation-component"><a href="#presentation-component" class="headerlink" title="presentation component"></a>presentation component</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DogImages</span>(<span class="params">&#123; dogs &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dogs.map(<span class="function">(<span class="params">dog, i</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;dog&#125;</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;Dog&quot;</span> /&gt;</span></span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  在新的场景下，<code>hooks</code> 代替了原来的类组件的生命周期钩子函数，从而达到数据更新。视图分离最大的缺点就是，在一些细小的场景下，有点过于炫技。毕竟<br>不需要更改为无状态组件和hooks也可以达到同样的效果。</p><h2 id="observable-模式"><a href="#observable-模式" class="headerlink" title="observable 模式"></a>observable 模式</h2><blockquote><p>使用 <code>observables</code> 去通知所有的订阅者，当一个时间触发的时候。</p></blockquote><p>  也是很常见的模型了，<code>nodejs</code> 中的 <code>events</code> 模块就是典型的观察者模式。比如下方的一个最简化实现：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.observers = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.observers.push(func);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">unsubscribe</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.observers = <span class="built_in">this</span>.observers.filter(<span class="function"><span class="params">observer</span> =&gt;</span> observer !== func);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">notify</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.observers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> observer(data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  观察者模式的优点是 <code>observer</code> 能够在任意时间和 <code>observable</code> 进行解耦合，能够很好的实践单一职责原则和关注点分离；缺点就是当<br><code>observer</code>过去复杂时，处理订阅者的逻辑可能会有性能问题。比如说，fn 中的逻辑十分重。</p><h2 id="module-模式"><a href="#module-模式" class="headerlink" title="module 模式"></a>module 模式</h2><blockquote><p>将一大块逻辑切分成更小的，可复用的模块</p></blockquote><p>  这个特性其实本身是 <code>ES6</code> 支持的一部分，在之前的 <code>ES5</code>中是没有这种东西的，最多只有function scope，block scope（指with，try catch）。</p>]]></content>
    
    
    <summary type="html">模式的总结</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Begin blog with Hexo</title>
    <link href="http://olierjs.github.io/2021/12/03/hello-world/"/>
    <id>http://olierjs.github.io/2021/12/03/hello-world/</id>
    <published>2021-12-03T07:54:54.000Z</published>
    <updated>2022-02-20T14:24:06.914Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">This is a hexo introduction blog , based on original blog.</summary>
    
    
    
    <category term="hexo" scheme="http://olierjs.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://olierjs.github.io/tags/hexo/"/>
    
    <category term="hexo-cli" scheme="http://olierjs.github.io/tags/hexo-cli/"/>
    
  </entry>
  
  <entry>
    <title>rxjs learning</title>
    <link href="http://olierjs.github.io/2020/03/14/rxjs-fetch/"/>
    <id>http://olierjs.github.io/2020/03/14/rxjs-fetch/</id>
    <published>2020-03-14T03:14:20.000Z</published>
    <updated>2022-02-20T14:24:06.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Push 模型</span></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> Observable(<span class="function"><span class="params">subscriber</span> =&gt;</span> &#123;</span><br><span class="line">  subscriber.next(<span class="number">1</span>)</span><br><span class="line">  subscriber.next(<span class="number">2</span>)</span><br><span class="line">  subscriber.next(<span class="number">3</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subscriber.next(<span class="number">4</span>)</span><br><span class="line">    subscriber.complete()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;just before subscribe&#x27;</span>)</span><br><span class="line"></span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params">x</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`get value x: <span class="subst">$&#123;x&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">error</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error &#x27;</span>, e)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">complete</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;complete&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;just after subscribe&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// just before subscribe</span></span><br><span class="line"><span class="comment">// get value x: 1</span></span><br><span class="line"><span class="comment">// get value x: 2</span></span><br><span class="line"><span class="comment">// get value x: 3</span></span><br><span class="line"><span class="comment">// just after subscribe</span></span><br><span class="line"><span class="comment">// get value x: 4</span></span><br><span class="line"><span class="comment">// complete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observableFn = <span class="keyword">new</span> Observable(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    value.next(<span class="string">&#x27;this will passed through&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">observableFn.subscribe(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;passed succeed | &#x27;</span>, value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Pull-和-Push-模型"><a href="#Pull-和-Push-模型" class="headerlink" title="Pull 和 Push 模型"></a>Pull 和 Push 模型</h3><blockquote><p>Pull: 消费者决定生产者产生内容的时机<br>Push: 生产者决定消费者消费内容的时机</p></blockquote><h4 id="provider-的几种生成方式"><a href="#provider-的几种生成方式" class="headerlink" title="provider 的几种生成方式"></a>provider 的几种生成方式</h4><blockquote><p>四种方式</p></blockquote><ul><li><code>Function</code> : 懒执行的函数</li><li><code>generator</code> : 懒执行的生成器</li><li><code>Promise</code>:</li><li><code>Observable</code>:</li></ul><h4 id="Observable-的-Push-模型"><a href="#Observable-的-Push-模型" class="headerlink" title="Observable 的 Push 模型"></a>Observable 的 Push 模型</h4><p>每个订阅器之间都是相互独立的，不会共享状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Observable(<span class="function"><span class="params">subscriber</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> n = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="built_in">console</span>.log(n)</span><br><span class="line">  subscriber.next(n)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">foo.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;show: &#x27;</span>, x)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">foo.subscribe(<span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;show: &#x27;</span>, y)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 1584368979446</span></span><br><span class="line"><span class="comment">// show:  1584368979446</span></span><br><span class="line"><span class="comment">// 1584368979448</span></span><br><span class="line"><span class="comment">// show:  1584368979448</span></span><br></pre></td></tr></table></figure><h4 id="不同于-EventEmitter-的触发方式"><a href="#不同于-EventEmitter-的触发方式" class="headerlink" title="不同于 EventEmitter 的触发方式"></a>不同于 EventEmitter 的触发方式</h4><p>同步的共享状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; EventEmitter &#125; <span class="keyword">from</span> <span class="string">&#x27;events&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> events = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"></span><br><span class="line">events.on(<span class="string">&#x27;a&#x27;</span>, <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;show&#x27;</span>, x)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">events.on(<span class="string">&#x27;a&#x27;</span>, <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;show&#x27;</span>, y)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">events.emit(<span class="string">&#x27;a&#x27;</span>, <span class="built_in">Date</span>.now())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// show 1584369837145</span></span><br><span class="line"><span class="comment">// show 1584369837145</span></span><br></pre></td></tr></table></figure><p>每次对 <code>observable.subscribe</code> 的调用，都会触发一个独立的 <strong>subscriber</strong> 的设置。</p><h4 id="取消对observable的执行"><a href="#取消对observable的执行" class="headerlink" title="取消对observable的执行"></a>取消对<code>observable</code>的执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="keyword">from</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line"><span class="keyword">const</span> subscription = observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// later</span></span><br><span class="line">subscription.unsubscribe()</span><br></pre></td></tr></table></figure><h4 id="构造函数需要返回一个销毁函数来取消订阅"><a href="#构造函数需要返回一个销毁函数来取消订阅" class="headerlink" title="构造函数需要返回一个销毁函数来取消订阅"></a>构造函数需要返回一个销毁函数来取消订阅</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> Observable(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">subscriber</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="comment">// keep track of the interval resource</span></span><br><span class="line">  <span class="keyword">const</span> intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subscriber.next(<span class="string">&#x27;hi&#x27;</span> + i++)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(intervalId)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h2><p>操作符将 <code>Observable</code> 作为一个输入，然后输出另外一个 <code>Observable</code>。输出的 <code>Observable</code>的逻辑是基于<br>输入的 <code>Observable</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; map, first &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span></span><br><span class="line"></span><br><span class="line">map(<span class="function">(<span class="params">x: number</span>) =&gt;</span> x * x)(<span class="keyword">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)).subscribe(<span class="function">(<span class="params">v: number</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`value: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs:</span></span><br><span class="line"><span class="comment">// value: 1</span></span><br><span class="line"><span class="comment">// value: 2</span></span><br><span class="line"><span class="comment">// value: 3</span></span><br><span class="line"></span><br><span class="line">first().pipe(<span class="keyword">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)).subscribe(<span class="function">(<span class="params">v: number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`value: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs:</span></span><br><span class="line"><span class="comment">// value: 1</span></span><br></pre></td></tr></table></figure><h2 id="Higher-order-Observables"><a href="#Higher-order-Observables" class="headerlink" title="Higher-order Observables"></a>Higher-order Observables</h2><p><code>Observable</code>数组就是 高阶 <code>Observable</code>. 高阶 ob 转化为普通 ob 的方式就是通过 <code>operators</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileObservable = urlObservable.pipe(</span><br><span class="line">  map(<span class="function"><span class="params">url</span> =&gt;</span> http.get(url)),</span><br><span class="line">  concatAll(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Creating-custom-observables"><a href="#Creating-custom-observables" class="headerlink" title="Creating custom observables"></a>Creating custom observables</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">delayInMillis</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">observable: Observable&lt;number&gt;</span>) =&gt;</span></span><br><span class="line">    <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> allTimerIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">      <span class="keyword">const</span> subscription = observable.subscribe(&#123;</span><br><span class="line">        <span class="function"><span class="title">next</span>(<span class="params">x: number</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> timeId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            observer.next(x)</span><br><span class="line">            allTimerIds.delete(timeId)</span><br><span class="line">          &#125;, delayInMillis)</span><br><span class="line">          allTimerIds.add(timeId)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">error</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">          observer.error(err)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">complete</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          observer.complete()</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        subscription.unsubscribe()</span><br><span class="line">        allTimerIds.forEach(<span class="function">(<span class="params">timeId: number</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable1 = interval(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable2 = interval(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subscription = observable1.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;first : &#x27;</span>, x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> childSubscription = observable2.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;second:&#x27;</span>, x))</span><br><span class="line"></span><br><span class="line">subscription.add(childSubscription)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  subscription.unsubscribe()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2><p>是一个多播的一个 <code>Observable</code>，普通的<code>Observable</code>是一个单播的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subject &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> Subject&lt;number&gt;();</span><br><span class="line"></span><br><span class="line">subject.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;first subscribe&quot;</span>, x));</span><br><span class="line"></span><br><span class="line">subject.subscribe(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;second subscribe&quot;</span>, y));</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subject.next(<span class="number">2222</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs:</span></span><br><span class="line"><span class="comment">// first subscribe 11</span></span><br><span class="line"><span class="comment">// second subscribe 11</span></span><br><span class="line"><span class="comment">// first subscribe 2222</span></span><br><span class="line"><span class="comment">// second subscribe 2222</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为<code>Subject</code>是一个<code>Observable</code>，这意味着可以提供给任意一个<code>Observable</code>的<code>subscribe</code>一个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subject, <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> Subject()</span><br><span class="line"></span><br><span class="line">subject.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`first : <span class="subst">$&#123;x&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line">subject.subscribe(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`second : <span class="subst">$&#123;y&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="keyword">from</span>([<span class="number">1</span>, <span class="number">423</span>, <span class="number">213</span>])</span><br><span class="line"></span><br><span class="line">observable.subscribe(subject)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs :</span></span><br><span class="line"><span class="comment">// first : 1</span></span><br><span class="line"><span class="comment">// second : 1</span></span><br><span class="line"><span class="comment">// first : 423</span></span><br><span class="line"><span class="comment">// second : 423</span></span><br><span class="line"><span class="comment">// first : 213</span></span><br><span class="line"><span class="comment">// second : 213</span></span><br></pre></td></tr></table></figure><h3 id="Multicasted-Observable"><a href="#Multicasted-Observable" class="headerlink" title="Multicasted Observable"></a>Multicasted Observable</h3><p>一个 可广播的 <code>Observable</code>通过<code>Subject</code>来进行广播，广播给多个订阅者。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span>, Subject &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; multicast &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="keyword">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">const</span> multicasted = source.pipe(multicast(subject))</span><br><span class="line"></span><br><span class="line"><span class="comment">// These are, under the hood, `subject.subscribe(&#123;...&#125;)`:</span></span><br><span class="line">multicasted.subscribe(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">&#125;)</span><br><span class="line">multicasted.subscribe(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is, under the hood, `source.subscribe(subject)`:</span></span><br><span class="line">multicasted.connect()</span><br></pre></td></tr></table></figure><h3 id="Reference-Count"><a href="#Reference-Count" class="headerlink" title="Reference Count"></a>Reference Count</h3><p>通过 <code>reference count</code>可以自动调用 <code>connect</code>的方法，当第一个<code>Observable</code>到达的时候，也会自动取消订阅，当最后一个<code>Observable</code>取消订阅的时候。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, Subject, Subscription &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; multicast, refCount &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">const</span> source = interval(<span class="number">500</span>)</span><br><span class="line"><span class="keyword">const</span> refCounted = source.pipe(multicast(subject), refCount())</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subscription1: Subscription, <span class="attr">subscription2</span>: Subscription</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Observable A subscripted&#x27;</span>)</span><br><span class="line"></span><br><span class="line">subscription1 = refCounted.subscribe(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;observable B subscripted&#x27;</span>)</span><br><span class="line">  subscription2 = refCounted.subscribe(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">600</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;observable A unsubscribed&#x27;</span>)</span><br><span class="line">  subscription1.unsubscribe()</span><br><span class="line">&#125;, <span class="number">1200</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;observable B unsubscribed&#x27;</span>)</span><br><span class="line">  subscription2.unsubscribe()</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h3 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h3><p><code>BehaviorSubject</code> 存储<code>subscriber</code>最近触发的那一个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BehaviorSubject &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> BehaviorSubject(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">subject.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;first subscribe&#x27;</span>, x)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">1</span>)</span><br><span class="line">subject.next(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">subject.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;second subscribe&#x27;</span>, x)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">3</span>)</span><br><span class="line">subject.complete()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Logs:</span></span><br><span class="line"><span class="comment">// first subscribe 0</span></span><br><span class="line"><span class="comment">// first subscribe 1</span></span><br><span class="line"><span class="comment">// first subscribe 2</span></span><br><span class="line"><span class="comment">// second subscribe 2</span></span><br><span class="line"><span class="comment">// first subscribe 3</span></span><br><span class="line"><span class="comment">// second subscribe 3</span></span><br></pre></td></tr></table></figure><h3 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h3><p><code>ReplaySubject</code> 存储<code>subscriber</code>所有的值，当另一个<code>subscriber</code>订阅时，将会重新触发一遍所有的值。值的大小在初始化时需要定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ReplaySubject &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> ReplaySubject(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">subject.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`first subscribe: <span class="subst">$&#123;x&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">1</span>)</span><br><span class="line">subject.next(<span class="number">2</span>)</span><br><span class="line">subject.next(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">subject.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`second subscribe: <span class="subst">$&#123;x&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs</span></span><br><span class="line"><span class="comment">// first subscribe: 1</span></span><br><span class="line"><span class="comment">// first subscribe: 2</span></span><br><span class="line"><span class="comment">// first subscribe: 3</span></span><br><span class="line"><span class="comment">// second subscribe: 2</span></span><br><span class="line"><span class="comment">// second subscribe: 3</span></span><br><span class="line"><span class="comment">// first subscribe: 5</span></span><br><span class="line"><span class="comment">// second subscribe: 5</span></span><br></pre></td></tr></table></figure><p>第二个参数可以传 <code>window time</code>，表示最近多少时间内的值可以用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ReplaySubject &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> ReplaySubject(<span class="number">100</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">subject.subscribe(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> subject.next(i++), <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  subject.subscribe(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  subject.next(<span class="string">&#x27;------&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="AsyncSubject"><a href="#AsyncSubject" class="headerlink" title="AsyncSubject"></a>AsyncSubject</h3><p>异步 <code>Observable</code>只有当 执行 <code>complete</code>的时候，才会返回最后一个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AsyncSubject &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> AsyncSubject()</span><br><span class="line"></span><br><span class="line">subject.subscribe(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">1</span>)</span><br><span class="line">subject.next(<span class="number">2</span>)</span><br><span class="line">subject.next(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">subject.subscribe(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">subject.next(<span class="number">4</span>)</span><br><span class="line">subject.next(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  subject.next(<span class="number">6</span>)</span><br><span class="line">  subject.complete()</span><br><span class="line">&#125;, <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Log</span></span><br><span class="line"><span class="comment">// observerA: 6</span></span><br><span class="line"><span class="comment">// observerB: 6</span></span><br></pre></td></tr></table></figure><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p>排程器是用来控制啥时候 <code>subscription</code>开始，什么时候会传递一个通知。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable, asyncScheduler &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; observeOn &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  observer.next(<span class="number">1</span>)</span><br><span class="line">  observer.next(<span class="number">2</span>)</span><br><span class="line">  observer.next(<span class="number">3</span>)</span><br><span class="line">  observer.complete()</span><br><span class="line">&#125;).pipe(observeOn(asyncScheduler))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;just before subscribe&#x27;</span>)</span><br><span class="line">observable.subscribe(&#123;</span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params">x</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;got value &#x27;</span> + x)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">error</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;something wrong occurred: &#x27;</span> + err)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">complete</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;just after subscribe&#x27;</span>)</span><br></pre></td></tr></table></figure><p>异步排程器的工作远离可以用下面这个例子，进行解释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable, asyncScheduler &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; observeOn &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs/operators&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observable = <span class="keyword">new</span> Observable(<span class="function"><span class="params">proxyObserver</span> =&gt;</span> &#123;</span><br><span class="line">  proxyObserver.next(<span class="number">1</span>)</span><br><span class="line">  proxyObserver.next(<span class="number">2</span>)</span><br><span class="line">  proxyObserver.next(<span class="number">3</span>)</span><br><span class="line">  proxyObserver.complete()</span><br><span class="line">&#125;).pipe(observeOn(asyncScheduler))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> finalObserver = &#123;</span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params">x</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;got value &#x27;</span> + x)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">error</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;something wrong occurred: &#x27;</span> + err)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">complete</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;just before subscribe&#x27;</span>)</span><br><span class="line">observable.subscribe(finalObserver)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;just after subscribe&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上面例子中的<code>observerOn(asyncScheduler)</code>是一个代理的<code>proxyObservable</code>，很想下面这样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxyObservable = &#123;</span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    asyncScheduler.schedule(</span><br><span class="line">      <span class="function"><span class="params">x</span> =&gt;</span> finalObserver.next(x),</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">rxjs6 学习总结</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx 的一些概念和解析</title>
    <link href="http://olierjs.github.io/2018/11/30/nginx-step/"/>
    <id>http://olierjs.github.io/2018/11/30/nginx-step/</id>
    <published>2018-11-30T02:10:06.000Z</published>
    <updated>2022-02-20T14:24:06.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx-解析过程"><a href="#nginx-解析过程" class="headerlink" title="nginx 解析过程"></a><code>nginx</code> 解析过程</h1><ul><li>ngx_http_process_request_line</li></ul><blockquote><p>HTTP 请求行之前的处理，主要获取 path，method等信息</p></blockquote><pre><code>- ngx_http_read_request_header- ngx_http_parse_request_line- ngx_http_process_request_headers</code></pre><blockquote><p>HTTP 请求头的处理</p></blockquote><pre><code>- ngx_http_read_request_header- ngx_http_parse_header_line- 解析到 `header` 名称，在 `ngx_http_headers_in` 中保存，是一个哈希表，有对应的handler，</code></pre><p>对某些特殊的请求头会进行处理</p><ul><li>ngx_http_process_request</li></ul><blockquote><p>设置当前的读写事件处理函数为 <code>ngx_http_request_handler</code> , 这个 <code>handler</code> 会根据当前的事件是 <code>read_event_handler</code> 的 还是 <code>write_event_handler</code> 来处理，但是在这个阶段，请求头已经处理完成了，并且不会先处理请求体，所以此时会设置 <code>read_event_handler</code> 为<code>ngx_http_block_reading</code>，也就是暂时不读取数据了。</p></blockquote><ul><li>ngx_http_handler</li></ul><blockquote><p>设置 <code>write_event_handler</code> 为 <code>ngx_http_core_run_phases</code>，这个<code>handler</code>用来产生数据, 最终产生的数据会放在<code>ngx_http_request_t</code> 的 <code>headers_out</code> 中。</p></blockquote><ul><li>ngx_http_header_filter</li></ul><blockquote><p>遍历所有的响应头，最终输出的响应头在一个连续内存中</p></blockquote><ul><li><p>ngx_body_filter</p></li><li><p>ngx_http_write_filter</p></li></ul><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><ul><li>keepalive  </li></ul><blockquote><p>HTTP 1.0 协议中，响应头中的 <code>content-length</code> 如果指定了，那么客户端就按照这个长度进行数据读取，如果没有指定，就会等待服务端主动断开<br>HTTP 1.1 协议中，如果 <code>transfer-encoding</code> 为 <code>chunked</code>传输，则表示<code>body</code>是流式传输，会被分成多个块，每块的开始会标识出当前的长度。<br>如果有 <code>content-length</code>且是非<code>chunk</code>出书，则会按照这个来进行接收数据；两者都没有，则由服务端主动断开连接。</p></blockquote><ul><li>pipe</li></ul><blockquote><p>流式处理请求，客户端不用等请求完就可以发送下一个请求，服务端在收到请求后，会先放在buffer中，如果buffer中有数据，那么会继续当做请求处理。</p></blockquote><ul><li>linger_close</li></ul><blockquote><p>某些情况下会出现，执行完 <code>write</code> 系统调用后，数据在tcp的write buffer中，如果直接执行<code>close</code> 系统调用，那么系统会检查 tcp 的 read buffer<br>中是不是还有数据，如果有数据，则会认为客户端又发送过来消息，则会reset掉这些buffer，然后丢弃掉 write buffer 中的东西；如果没有数据，那么才会<br>进行正常的4次分手连接。故，设置一个超时时间用来读取客服端发送过来的数据。</p></blockquote><h1 id="nginx-的-配置系统"><a href="#nginx-的-配置系统" class="headerlink" title="nginx 的 配置系统"></a>nginx 的 配置系统</h1><h2 id="nginx-的指令上下文"><a href="#nginx-的指令上下文" class="headerlink" title="nginx  的指令上下文"></a>nginx  的指令上下文</h2><ul><li><p>main: nginx在运行时与具体业务无关的一些参数，比如什么工作进程数，运行的身份等</p></li><li><p>http: 与提供http服务相关的一些配置参数。比如是否使用 keepalive， 是否进行gzip压缩等</p></li><li><p>server： 支持多个虚拟主机。 灭一个虚拟主机对应一个server配置项</p></li><li><p>location： http服务中， 某些特定的url对于英的一系列配置项。</p></li><li><p>mail： 实现email相关的 <code>SMTP/IMAP/POP3</code>代理时，共享的一些配置项。</p></li></ul><blockquote><p>指令上下文， 可能有包含的情况出现。例如：通常http上下文和mail上下文一定是出现在main上下文里的。例如，如果http服务支持多个虚拟主机，那么在<br>http上下文里，会出现多个server上下文：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">user nobody;</span><br><span class="line">worker_processes 1;</span><br><span class="line">error_log logs/error.log info;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.example.com;</span><br><span class="line">        access_log  logs/example.log main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            index index.html;</span><br><span class="line">            root /var/www/example.com/index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name 1.example.com;</span><br><span class="line">        access_log  logs/1.example.com main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            index index.html;</span><br><span class="line">            root /var/www/1.example.com/index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mail &#123;</span><br><span class="line">    auth_http   127.0.0.1:80/auth.php;</span><br><span class="line">    pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span><br><span class="line">    imap_capabilities  &quot;IMAP4rev1&quot;  &quot;UIDPLUS&quot;;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen     110;</span><br><span class="line">        protocol   pop3;</span><br><span class="line">        proxy      on;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen      25;</span><br><span class="line">        protocol    smtp;</span><br><span class="line">        proxy       on;</span><br><span class="line">        smtp_auth   login plain;</span><br><span class="line">        xclient     off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="http-请求的处理流程"><a href="#http-请求的处理流程" class="headerlink" title="http 请求的处理流程"></a>http 请求的处理流程</h1><p>当nginx读取到一个<code>HTTP Request</code>的<code>header</code>的时候， <code>nginx</code> 首先查找与这个请求关联的虚拟主机的配置。然后进行一下阶段的处理：</p><ul><li><p>NGX_HTTP_POST_READ_PHASE</p></li><li><p>NGX_HTTP_SERVER_REWRITE_PHASE</p></li><li><p>NGX_HTTP_FIND_CONFIG_PHASE</p></li><li><p>NGX_HTTP_REWRITE_PHASE</p></li><li><p>NGX_HTTP_POST_REWRITE_PHASE</p></li><li><p>NGX_HTTP_PREACCESS_PHASE</p></li><li><p>NGX_HTTP_ACCESS_PHASE</p></li><li><p>NGX_HTTP_POST_ACCESS_PHASE</p></li><li><p>NGX_HTTP_TRY_FILES_PHASE</p></li><li><p>NGX_HTTP_CONTENT_PHASE</p></li><li><p>NGX_HTTP_LOG_PHASE</p></li></ul>]]></content>
    
    
    <summary type="html">介绍了一些nginx下的概念，和一些解析的过程</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>babel 的使用</title>
    <link href="http://olierjs.github.io/2018/09/03/babel-step/"/>
    <id>http://olierjs.github.io/2018/09/03/babel-step/</id>
    <published>2018-09-03T07:54:54.000Z</published>
    <updated>2022-02-20T14:24:06.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="babel-配置的坑"><a href="#babel-配置的坑" class="headerlink" title="babel 配置的坑"></a>babel 配置的坑</h2><blockquote><p>.babelrc</p></blockquote><h3 id="Plugin-Preset-的简写"><a href="#Plugin-Preset-的简写" class="headerlink" title="Plugin/Preset 的简写"></a>Plugin/Preset 的简写</h3><p>  如果插件的前缀是以 <code>babel-plugin-</code> 前缀开头的，那么在 <code>plugins</code> 的配置中可以简写，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins 和 presets 类似</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;myPlugin&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面与上面的功能一致</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [<span class="string">&quot;babel-plugin-myPlugin&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩写 在特定领域的包中也是适用的</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@org/babel-preset-myPreset&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面与上面一致</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@org/myPreset&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Plugin-Preset-插件的顺序"><a href="#Plugin-Preset-插件的顺序" class="headerlink" title="Plugin/Preset  插件的顺序"></a>Plugin/Preset  插件的顺序</h3><p>  插件的顺序还是蛮重要的，对于一个 <code>js</code> 文件来说，如果有两个插件使用转换这个文件，那么这些转换器<br>将以下面的顺序进行转换：</p><ul><li><p>插件 <code>Plugin</code> 运行在 插件集<code>Preset</code> 之前</p></li><li><p>插件 <code>Plugin</code>中的顺序是从 <code>0-n</code>， 也就是从第一个到最后一个</p></li><li><p>插件集 <code>Preset</code> 中的顺序则是从 <code>n-0</code>， 也就是从最后一个到第一个</p><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;transform-decorators-legacy&quot;</span>,</span><br><span class="line">        <span class="string">&quot;transform-class-properties&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的配置将会先运行 <code>transform-decorators-legacy</code>， 再运行 <code>transform-class-properties</code>.</p></li></ul><p> <code>presets</code> 的顺序是反过来的，这一点是很重要的: </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">        <span class="string">&quot;react&quot;</span>,</span><br><span class="line">        <span class="string">&quot;stage-2&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面配置的运行顺序是： <code>stage-2</code>, <code>react</code>, <code>es2015</code>.</p><h3 id="Plugin-Preset-选项"><a href="#Plugin-Preset-选项" class="headerlink" title="Plugin/Preset 选项"></a>Plugin/Preset 选项</h3><p> <code>plugins</code>和<code>presets</code>都有可选项，这些可选项都是以一个数组包起来的，数组中以 <code>name, object</code>为元素，例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;transform-async-to-module-method&quot;</span>, </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;bluebird&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;coroutine&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>presets</code>的设置也一样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&quot;es2015&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;loose&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h3><p>  <a href="https://en.wikipedia.org/wiki/Polyfill_(programming)">ployfill</a>， 如果不添加 <code>babel-polyfill</code> ，那么直接由 <code>babel-preset-env</code><br>生成的 <code>es5</code> 代码在某些浏览器或者 <code>webview</code> 里面是不支持所有的 <code>es5</code> 特性的，所以要想让他们这些环境支持，就需要使用<code>polyfill</code>进行补充。</p><p>  <code>ployfill</code> 可以在一些不支持新特性的浏览器中，在全局补充这些方法。从而使得新的特性的代码能够运行在一些不支持新特性的代码中。如果要支持到<code>es3</code>，那么<br>可以在全局引入一些<code>shim</code>库，比如<a href="https://github.com/es-shims/es5-shim">es5-shim</a>。</p><p>  在使用 <code>ployfill</code> 库的时候，需要将它作为 <code>dependency</code>，因为它是运行在我们自己的代码之前的，并且要放到生产环境下的。</p>]]></content>
    
    
    <summary type="html">单独使用babel的配置文件，总结了一些使用方面的说明</summary>
    
    
    
    
  </entry>
  
</feed>
